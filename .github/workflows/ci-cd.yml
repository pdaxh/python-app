name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: python-app

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
        pip install flake8 pytest

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # Create a simple test file if it doesn't exist
        if [ ! -f src/test_app.py ]; then
          cat > src/test_app.py << 'EOF'
        import unittest
        from app import app

        class TestFlaskApp(unittest.TestCase):
            def setUp(self):
                self.app = app.test_client()
                self.app.testing = True

            def test_hello_world(self):
                response = self.app.get('/')
                self.assertEqual(response.status_code, 200)
                self.assertIn(b'Hello World', response.data)

            def test_hello_endpoint(self):
                response = self.app.get('/hello')
                self.assertEqual(response.status_code, 200)
                self.assertIn(b'Hello World', response.data)

            def test_health_check(self):
                response = self.app.get('/health')
                self.assertEqual(response.status_code, 200)
                self.assertIn(b'healthy', response.data)

            def test_datetime_endpoint(self):
                response = self.app.get('/datetime')
                self.assertEqual(response.status_code, 200)
                data = response.get_json()
                self.assertIn('date', data)
                self.assertIn('time', data)
                self.assertIn('datetime', data)
                self.assertIn('timestamp', data)

            def test_time_endpoint(self):
                response = self.app.get('/time')
                self.assertEqual(response.status_code, 200)
                data = response.get_json()
                self.assertIn('current_time', data)
                self.assertIn('timezone', data)

            def test_date_endpoint(self):
                response = self.app.get('/date')
                self.assertEqual(response.status_code, 200)
                data = response.get_json()
                self.assertIn('current_date', data)
                self.assertIn('day_of_week', data)
                self.assertIn('month', data)

        if __name__ == '__main__':
            unittest.main()
        EOF
        fi
        cd src && python -m pytest test_app.py -v

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Docker/Dockerfile
        push: false
        tags: ${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    # Required secrets: OPENSHIFT_SERVER_URL and OPENSHIFT_TOKEN
    # Set these in GitHub repository settings > Secrets and variables > Actions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up OpenShift CLI
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 'latest'

    - name: Verify OpenShift CLI
      run: |
        oc version --client
        echo "OpenShift CLI installed successfully"

    - name: Login to OpenShift
      run: |
        echo "Logging into OpenShift..."
        echo "Server URL: ${{ secrets.OPENSHIFT_SERVER_URL }}"
        echo "Token: ${{ secrets.OPENSHIFT_TOKEN }}"
        
        if [ -z "${{ secrets.OPENSHIFT_SERVER_URL }}" ]; then
          echo "ERROR: OPENSHIFT_SERVER_URL secret is not set"
          exit 1
        fi
        
        if [ -z "${{ secrets.OPENSHIFT_TOKEN }}" ]; then
          echo "ERROR: OPENSHIFT_TOKEN secret is not set"
          exit 1
        fi
        
        oc login ${{ secrets.OPENSHIFT_SERVER_URL }} --token=${{ secrets.OPENSHIFT_TOKEN }} --insecure-skip-tls-verify=true
        echo "Login successful"
        oc whoami

    - name: Deploy to OpenShift
      run: |
        echo "Deploying to OpenShift..."
        
        # Create or update the deployment
        oc apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: python-app-github
          labels:
            app: python-app-github
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: python-app-github
          template:
            metadata:
              labels:
                app: python-app-github
            spec:
              containers:
              - name: python-app
                image: image-registry.openshift-image-registry.svc:5000/daaxh25-dev/python-app-pipeline:latest
                ports:
                - containerPort: 8080
                command: ["/bin/bash"]
                args: 
                - -c
                - |
                  cd /opt/app-root/src/src
                  pip install -r requirements.txt
                  python app.py
                env:
                - name: FLASK_APP
                  value: "app.py"
                - name: FLASK_ENV
                  value: "production"
                - name: FLASK_RUN_HOST
                  value: "0.0.0.0"
                - name: FLASK_RUN_PORT
                  value: "8080"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: python-app-github
          labels:
            app: python-app-github
        spec:
          ports:
          - port: 8080
            targetPort: 8080
          selector:
            app: python-app-github
        ---
        apiVersion: route.openshift.io/v1
        kind: Route
        metadata:
          name: python-app-github
          labels:
            app: python-app-github
        spec:
          to:
            kind: Service
            name: python-app-github
          port:
            targetPort: 8080
        EOF

    - name: Wait for deployment
      run: |
        oc rollout status deployment/python-app-github --timeout=300s

    - name: Get application URL
      run: |
        ROUTE=$(oc get route python-app-github -o jsonpath='{.spec.host}')
        echo "Application deployed at: http://$ROUTE"
        echo "::set-output name=url::http://$ROUTE"

    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes..."
        echo "In a real scenario, this would deploy the application to your K8s cluster"
        echo "kubectl apply -f k8s/"
        echo "kubectl wait --for=condition=available --timeout=60s deployment/flask-app"

