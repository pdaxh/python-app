name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
        pip install flake8 pytest

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # Create a simple test file if it doesn't exist
        if [ ! -f src/test_app.py ]; then
          cat > src/test_app.py << 'EOF'
        import unittest
        from app import app

        class TestFlaskApp(unittest.TestCase):
            def setUp(self):
                self.app = app.test_client()
                self.app.testing = True

            def test_hello_world(self):
                response = self.app.get('/')
                self.assertEqual(response.status_code, 200)
                self.assertIn(b'Hello World', response.data)

            def test_hello_endpoint(self):
                response = self.app.get('/hello')
                self.assertEqual(response.status_code, 200)
                self.assertIn(b'Hello World', response.data)

            def test_health_check(self):
                response = self.app.get('/health')
                self.assertEqual(response.status_code, 200)
                self.assertIn(b'healthy', response.data)

            def test_datetime_endpoint(self):
                response = self.app.get('/datetime')
                self.assertEqual(response.status_code, 200)
                data = response.get_json()
                self.assertIn('date', data)
                self.assertIn('time', data)
                self.assertIn('datetime', data)
                self.assertIn('timestamp', data)

            def test_time_endpoint(self):
                response = self.app.get('/time')
                self.assertEqual(response.status_code, 200)
                data = response.get_json()
                self.assertIn('current_time', data)
                self.assertIn('timezone', data)

            def test_date_endpoint(self):
                response = self.app.get('/date')
                self.assertEqual(response.status_code, 200)
                data = response.get_json()
                self.assertIn('current_date', data)
                self.assertIn('day_of_week', data)
                self.assertIn('month', data)

        if __name__ == '__main__':
            unittest.main()
        EOF
        fi
        cd src && python -m pytest test_app.py -v

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "Setting up kubectl configuration..."
        # This is a placeholder - in a real scenario, you would:
        # 1. Set up your Kubernetes cluster credentials
        # 2. Configure kubectl to connect to your cluster
        # 3. Apply the Kubernetes manifests
        echo "kubectl configuration would be set up here"
        echo "kubectl apply -f k8s/"

    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes..."
        echo "In a real scenario, this would deploy the application to your K8s cluster"
        echo "kubectl apply -f k8s/"
        echo "kubectl wait --for=condition=available --timeout=60s deployment/flask-app"

